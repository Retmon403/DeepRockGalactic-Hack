#include "DllInjector.hpp"

char unsigned g_x64_shellcode[] = { 0x4C,0x8B,0xDC,0x55,0x57,0x41,0x54,0x41,0x56,0x49,0x8D,0x6B,0xA1,0x48,0x81,0xEC,0x98,0x0,0x0,0x0,0x48,0x8B,0x41,0x20,0x45,0x33,0xC0,0x44,0x8B,0x49,0x8,0x48,0x8B,0x39,0x4C,0x8B,0x61,0x10,0x4C,0x8B,0x71,0x18,0x48,0x89,0x45,0xE7,0x48,0x8B,0x41,0x28,0x48,0x89,0x45,0x7F,0x48,0x8B,0x41,0x30,0x48,0x89,0x45,0xDF,0x48,0x8B,0x41,0x38,0x48,0x89,0x45,0xEF,0x4C,0x89,0x45,0x67,0x49,0x83,0xF9,0x40,0xF,0x86,0xC7,0x3,0x0,0x0,0xB8,0x4D,0x5A,0x0,0x0,0x66,0x39,0x7,0xF,0x85,0xB9,0x3,0x0,0x0,0x48,0x63,0x4F,0x3C,0x48,0x8D,0x81,0x8,0x1,0x0,0x0,0x4C,0x3B,0xC8,0xF,0x82,0xA5,0x3,0x0,0x0,0x81,0x3C,0x39,0x50,0x45,0x0,0x0,0x4D,0x89,0x6B,0xC8,0x4C,0x8D,0x2C,0x39,0xF,0x85,0x88,0x3,0x0,0x0,0x41,0xF,0xB7,0x45,0x16,0xB9,0x2,0x20,0x0,0x0,0x66,0x23,0xC1,0x66,0x3B,0xC1,0xF,0x85,0x72,0x3,0x0,0x0,0xB8,0xF0,0x0,0x0,0x0,0x66,0x41,0x39,0x45,0x14,0xF,0x85,0x62,0x3,0x0,0x0,0x45,0xF,0xB7,0x55,0x6,0x33,0xD2,0x49,0x89,0x5B,0xD8,0x49,0x8D,0x9D,0x18,0x1,0x0,0x0,0x45,0x85,0xD2,0x74,0x21,0x48,0x8B,0xCB,0xF,0x1F,0x44,0x0,0x0,0x8B,0x41,0x4,0x3,0x1,0x41,0x3B,0xC1,0xF,0x87,0x2D,0x3,0x0,0x0,0xFF,0xC2,0x48,0x83,0xC1,0x28,0x41,0x3B,0xD2,0x7C,0xE7,0x41,0x8B,0x45,0x54,0x33,0xD2,0xFF,0xC8,0x48,0x89,0xB4,0x24,0x88,0x0,0x0,0x0,0x41,0x8B,0x75,0x38,0x3,0xC6,0xF7,0xF6,0x44,0x8B,0xC8,0x44,0xF,0xAF,0xCE,0x45,0x85,0xD2,0x74,0x32,0x4C,0x8B,0xDB,0x41,0x8B,0x4B,0xF8,0x8D,0x46,0xFF,0x41,0x39,0xB,0x41,0xF,0x4F,0xB,0x33,0xD2,0x41,0x3,0x4B,0xFC,0x4D,0x8D,0x5B,0x28,0x3,0xC1,0xF7,0xF6,0xF,0xAF,0xC6,0x44,0x3B,0xC8,0x41,0xF,0x4D,0xC1,0x44,0x8B,0xC8,0x49,0x83,0xEA,0x1,0x75,0xD1,0x45,0x85,0xC9,0xF,0x84,0xBB,0x2,0x0,0x0,0x49,0x63,0xC1,0x48,0x8D,0x55,0x67,0x4C,0x8D,0x4D,0xD7,0xC7,0x44,0x24,0x28,0x40,0x0,0x0,0x0,0x48,0xC7,0xC1,0xFF,0xFF,0xFF,0xFF,0x48,0x89,0x45,0xD7,0xC7,0x44,0x24,0x20,0x0,0x10,0x0,0x0,0x41,0xFF,0xD6,0x4C,0x8B,0x45,0x67,0x4D,0x85,0xC0,0xF,0x84,0x85,0x2,0x0,0x0,0x41,0xF,0xB7,0x45,0x6,0x45,0x33,0xDB,0x8D,0xC,0x80,0x41,0x8B,0x45,0x54,0x8D,0xC,0xC8,0x48,0x63,0xD1,0x85,0xC9,0x7E,0x1D,0x41,0x8B,0xCB,0x66,0xF,0x1F,0x44,0x0,0x0,0xF,0xB6,0x4,0x39,0x42,0x88,0x4,0x1,0x48,0xFF,0xC1,0x4C,0x8B,0x45,0x67,0x48,0x3B,0xCA,0x7C,0xEC,0x45,0x8B,0xCB,0x66,0x45,0x3B,0x5D,0x6,0x73,0x4E,0x66,0x90,0x8B,0x4B,0xFC,0x85,0xC9,0x74,0x34,0x8B,0x3,0x85,0xC0,0x74,0x2E,0x49,0x8D,0x14,0x8,0x49,0x8B,0xCB,0xF,0x1F,0x40,0x0,0xF,0x1F,0x84,0x0,0x0,0x0,0x0,0x0,0x8B,0x43,0x4,0x48,0x3,0xC1,0xF,0xB6,0x4,0x38,0x88,0x4,0x11,0x48,0xFF,0xC1,0x8B,0x3,0x48,0x3B,0xC8,0x72,0xE9,0x4C,0x8B,0x45,0x67,0x41,0xF,0xB7,0x45,0x6,0x41,0xFF,0xC1,0x48,0x83,0xC3,0x28,0x44,0x3B,0xC8,0x7C,0xB4,0x41,0x8B,0x85,0xB0,0x0,0x0,0x0,0x85,0xC0,0xF,0x84,0xB4,0x0,0x0,0x0,0x41,0x83,0xBD,0xB4,0x0,0x0,0x0,0x0,0xF,0x86,0xA6,0x0,0x0,0x0,0x41,0x8B,0xC,0x0,0x4D,0x8D,0x14,0x0,0x45,0x8B,0x4A,0x4,0x49,0x8B,0xD8,0x49,0x2B,0x5D,0x30,0x41,0x3,0xC9,0xF,0x84,0x8A,0x0,0x0,0x0,0xBE,0x0,0xF0,0x0,0x0,0xBF,0x0,0xA0,0x0,0x0,0x41,0xBE,0x0,0x30,0x0,0x0,0x66,0x66,0x66,0xF,0x1F,0x84,0x0,0x0,0x0,0x0,0x0,0x41,0x8B,0xC1,0x49,0x8B,0xD3,0x48,0x83,0xE8,0x8,0x48,0xD1,0xE8,0x4C,0x63,0xD8,0x85,0xC0,0x7E,0x42,0xF,0x1F,0x40,0x0,0xF,0x1F,0x84,0x0,0x0,0x0,0x0,0x0,0x45,0xF,0xB7,0x4C,0x52,0x8,0x41,0xF,0xB7,0xC1,0x66,0x23,0xC6,0x66,0x41,0x3B,0xC6,0x74,0x5,0x66,0x3B,0xC7,0x75,0x16,0x41,0x8B,0xA,0x41,0x81,0xE1,0xFF,0xF,0x0,0x0,0x4B,0x8D,0x4,0x8,0x48,0x1,0x1C,0x1,0x4C,0x8B,0x45,0x67,0x48,0xFF,0xC2,0x49,0x3B,0xD3,0x7C,0xCA,0x41,0x8B,0x42,0x4,0x41,0xBB,0x0,0x0,0x0,0x0,0x4C,0x3,0xD0,0x41,0x8B,0xA,0x45,0x8B,0x4A,0x4,0x41,0x3,0xC9,0x75,0x91,0x41,0x8B,0x85,0x90,0x0,0x0,0x0,0x48,0x85,0xC0,0xF,0x84,0x24,0x1,0x0,0x0,0x4C,0x89,0x7C,0x24,0x78,0x4E,0x8D,0x3C,0x0,0x42,0x8B,0x4,0x0,0x85,0xC0,0xF,0x84,0xEE,0x0,0x0,0x0,0x48,0x8B,0x7D,0x7F,0xF,0x1F,0x84,0x0,0x0,0x0,0x0,0x0,0x41,0x8B,0x57,0xC,0x48,0x8D,0x4D,0xF7,0x45,0x8B,0x77,0x10,0x49,0x3,0xD0,0x8B,0xF0,0x4D,0x3,0xF0,0x49,0x3,0xF0,0x4C,0x89,0x5D,0x6F,0xFF,0xD7,0x41,0xB0,0x1,0x48,0x8D,0x55,0xF7,0x48,0x8D,0x4D,0x7,0xFF,0x55,0xDF,0x4C,0x8D,0x4D,0x6F,0x33,0xD2,0x4C,0x8D,0x45,0x7,0x33,0xC9,0xFF,0x55,0xE7,0x48,0x8D,0x4D,0x7,0xFF,0x55,0xEF,0x48,0x8B,0x4D,0x6F,0x48,0x85,0xC9,0xF,0x84,0xAC,0x0,0x0,0x0,0x48,0x8B,0x6,0x45,0x33,0xDB,0x41,0x8B,0xDB,0x48,0x85,0xC0,0x74,0x72,0x41,0x8B,0xFB,0x90,0x4C,0x89,0x5D,0x77,0x48,0x85,0xC0,0x79,0x11,0x66,0x85,0xC0,0xF,0x84,0x88,0x0,0x0,0x0,0x44,0xF,0xB7,0xC0,0x33,0xD2,0xEB,0x1F,0x4C,0x8B,0x45,0x67,0x49,0x8D,0x50,0x2,0x48,0x3,0xD0,0x74,0x77,0x48,0x8D,0x4D,0xF7,0xFF,0x55,0x7F,0x48,0x8B,0x4D,0x6F,0x48,0x8D,0x55,0xF7,0x45,0x33,0xC0,0x4C,0x8D,0x4D,0x77,0x41,0xFF,0xD4,0x48,0x8B,0x45,0x77,0x48,0x85,0xC0,0x74,0x51,0x48,0xFF,0xC3,0x4A,0x89,0x4,0x37,0x45,0x33,0xDB,0x48,0x8D,0x3C,0xDD,0x0,0x0,0x0,0x0,0x48,0x8B,0x4,0x37,0x48,0x85,0xC0,0x74,0x6,0x48,0x8B,0x4D,0x6F,0xEB,0x96,0x48,0x8B,0x7D,0x7F,0x41,0x8B,0x47,0x14,0x49,0x83,0xC7,0x14,0x4C,0x8B,0x45,0x67,0x85,0xC0,0xF,0x85,0x1E,0xFF,0xFF,0xFF,0x41,0x8B,0x45,0x28,0xBA,0x1,0x0,0x0,0x0,0x4D,0x89,0x45,0x30,0x33,0xC9,0x4C,0x8B,0x45,0x67,0x49,0x3,0xC0,0xFF,0xD0,0x4C,0x8B,0x45,0x67,0x4C,0x8B,0x7C,0x24,0x78,0x48,0x8B,0xB4,0x24,0x88,0x0,0x0,0x0,0x48,0x8B,0x9C,0x24,0x90,0x0,0x0,0x0,0x4C,0x8B,0xAC,0x24,0x80,0x0,0x0,0x0,0x49,0x8B,0xC0,0x48,0x81,0xC4,0x98,0x0,0x0,0x0,0x41,0x5E,0x41,0x5C,0x5F,0x5D,0xC3 };

PVOID ReadFileToBit(PCHAR Path, PDWORD lplength) {
	HANDLE hfile = CreateFileA(Path, GENERIC_READ | GENERIC_WRITE, 0, NULL,
		OPEN_EXISTING, FILE_ATTRIBUTE_READONLY, NULL);
	if (INVALID_HANDLE_VALUE == hfile) {
		return nullptr;
	}
	DWORD fsize = GetFileSize(hfile, NULL);
	PVOID dll_data = malloc((size_t)fsize + 1);
	if (!dll_data) {
		CloseHandle(hfile);
		return nullptr;
	}
	BOOL result = ReadFile(hfile, dll_data, fsize, NULL, NULL);
	if (!result) {
		free(dll_data);
	}
	CloseHandle(hfile);
	*lplength = fsize;
	return !result ? nullptr : dll_data;
}

bool DllInjectorByMemoryMap(DWORD ProcessId,PCHAR DllPath,SIZE_T PathSize) {
	bool result = false;
	DWORD fsize = 0;
	PVOID dll_data = ReadFileToBit(DllPath, &fsize);
	if (!dll_data || !fsize) {
		printf("ReadFileToBit Failed...\n");
		return result;
	}
	HMODULE ntdll = nullptr;
	PARAMX paramx = { 0 };
	LPVOID new_mem = nullptr;
	SIZE_T msize = sizeof(g_x64_shellcode) + fsize + 0x100;
	PVOID shell_addr = nullptr;
	PVOID shell_lp = nullptr;
	HANDLE hThread = 0;
	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, false, ProcessId);
	if (!hProcess) {
		printf("OpenProcess Failed...\n");
		goto free;
	}
	ntdll = GetModuleHandleA("ntdll.dll");
	paramx.LdrGetProcedureAddress = (LdrGetProcedureAddressT)GetProcAddress(ntdll, "LdrGetProcedureAddress");;
	paramx.dwNtAllocateVirtualMemory = (NtAllocateVirtualMemoryT)GetProcAddress(ntdll, "NtAllocateVirtualMemory");
	paramx.pLdrLoadDll = (LdrLoadDllT)GetProcAddress(ntdll, "LdrLoadDll");
	paramx.RtlInitAnsiString = (RtlInitAnsiStringT)GetProcAddress(ntdll, "RtlInitAnsiString");
	paramx.RtlAnsiStringToUnicodeString = (RtlAnsiStringToUnicodeStringT)GetProcAddress(ntdll, "RtlAnsiStringToUnicodeString");
	paramx.RtlFreeUnicodeString = (RtlFreeUnicodeStringT)GetProcAddress(ntdll, "RtlFreeUnicodeString");
	new_mem = VirtualAllocEx(hProcess, 0, msize, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	if (!new_mem) {
		printf("VirtualAllocEx Failed...\n");
		goto free;
	}
	paramx.lpFileData = new_mem;
	paramx.DataLength = fsize;
	shell_addr = (PVOID)((PCHAR)new_mem + fsize);
	shell_lp = (PVOID)((PCHAR)shell_addr + sizeof(g_x64_shellcode));
	if (!WriteProcessMemory(hProcess, new_mem, dll_data, fsize, 0) ||
		!WriteProcessMemory(hProcess, shell_addr, g_x64_shellcode, sizeof(g_x64_shellcode), 0) ||
		!WriteProcessMemory(hProcess, shell_lp, &paramx, sizeof(PARAMX), 0)) {
		printf("WriteProcessMemory Failed...\n");
		goto end;
	}
	hThread = CreateRemoteThread(hProcess, 0, 0, (LPTHREAD_START_ROUTINE)shell_addr, shell_lp, 0, 0);
	if (hThread) {
		result = true;
		WaitForSingleObject(hThread, INFINITE);
		CloseHandle(hThread);
		printf("%p\n", new_mem);
	}
	else {
		printf("CreateRemoteThread Failed...\n");
	}
end:
	VirtualFreeEx(hProcess, new_mem, 0, MEM_RELEASE);
	CloseHandle(hProcess);
free:
	free(dll_data);
	return result;
}


bool DllInjectorByCreateThread(DWORD pid, PCHAR dll_path, SIZE_T size) {
	bool result = false;
	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
	if (!hProcess) {
		return result;
	}
	FARPROC func_addr = GetProcAddress(GetModuleHandleA("kernel32.dll"), "LoadLibraryA");
	LPVOID new_addr = VirtualAllocEx(hProcess, 0, size, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	if (!new_addr) {
		CloseHandle(hProcess);
		return result;
	}
	HANDLE hThread = 0;
	if (!WriteProcessMemory(hProcess, new_addr, dll_path, size, 0)) {
		goto end;
	}
	hThread = CreateRemoteThread(hProcess, 0, 0, (LPTHREAD_START_ROUTINE)func_addr, new_addr, 0, 0);
	if (hThread) {
		result = true;
		WaitForSingleObject(hThread, INFINITE);
		CloseHandle(hThread);
	}
end:
	VirtualFreeEx(hProcess, new_addr, 0, MEM_RELEASE);
	CloseHandle(hProcess);
	return result;
}
